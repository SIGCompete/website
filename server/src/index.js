const express = require('express')
const bp = require('body-parser')
const cors = require('cors')
const {exec, spawn} = require('child_process');
const fs = require('fs');

const app = express()

app.use(bp.json())
app.use(cors());
app.use(express.urlencoded({ extended: true }))



app.get("/api", (req, res) => {
    //res.send("hello there")
    res.json({"users": ["userOne", "userTwo", "ron0studios"]})
})

const runPythonTests = async (testcases, answers) => {
    let results = []

    for(let i = 0; i < testcases.length; i++) {
      let result = await new Promise((resolve, _reject) => { 
        const python = spawn('python', ['code.py']);

        setTimeout(()=>{resolve("TLE")},1000) // time limit exceeded

        python.stdin.write(testcases[i].toString())
        python.stdin.end()
        let output = null;

        python.stdout.on('data', (data) => {
            console.log('Pipe data from python script ...');
            output = data.toString().trim();
            //console.log(output)
        });
        // in close event we are sure that stream from child process is closed
        python.on('close', (code) => {
            if(code != 0 || code === null){
              resolve("RE") // runtime error
            }
            
            // send data to browser
            if(output == answers[i])
            { 
                resolve("AC") // accepted
            }
            else
            {
                resolve("WA") // wrong answer
            }
        });
      })

      results.push(result)
      if(result != "AC")
      {
        break;
      }
    }

    return results;
}


const runCpp20Tests = async (testcases, answers) => {
    let results = []

    console.log("compiling c++20...")
    let compile = await new Promise((resolve, _reject) => {
      exec('g++ -Wall -Wextra -std=c++20 '+'code.cpp'+' -o ' + 'code', (error, _stdout, stderr) => {
        if (error) {
          console.log(`error: ${error.message}`);
          resolve("CE");
          return;
        }
        if (stderr) {
          console.log(`stderr: ${stderr}`);
          resolve("CE"); // compilation error
          return;
        }
        resolve("CS") // compilation successful
      });
    }).catch((err)=>{throw err})

    if(compile == "CE") return ["CE"]

    console.log("compiled! now running testcases...")
    
    for(let i = 0; i < testcases.length; i++) { 
      console.log(`Testcase #${i+1}:`)
      let result = await new Promise((resolve, _reject) => {
          const cpp = spawn('./code');

          setTimeout(()=>{resolve("TLE")},1000) // time limit exceeded

          cpp.stdin.write(testcases[i].toString())
          cpp.stdin.end()

          let output = null;

          cpp.stdout.on('data', (data) => {
              output = data.toString().trim();
          });

          cpp.stderr.on('data', (data) => console.log(data.toString()))


          // in close event we are sure that stream from child process is closed
          cpp.on('close', (code) => {
              if(code != 0 || code === null){
                resolve("RE") // runtime error
              }
              
              // send data to browser
              if(output == answers[i])
              { 
                  resolve("AC") // accepted
              }
              else
              {
                  resolve("WA") // wrong answer
              }
          });

      });

      results.push(result);
      if(result != "AC")
      {
        break;
      }

      
    }

  return results;
}




app.post("/submit", async (req,res) => {
    console.log("received")

    const {code, language} = req.body
    const lang2ext = {cpp20:"cpp",py3:"py"}
    
    await new Promise( (resolve, reject) => {
      fs.writeFile('code.'+lang2ext[language], code, (err) => {
        if (err) reject(err);
        console.log("saved!")
        resolve();
      }); 
    }).catch((err)=>{console.log(err)});


    // example problem statement:
    // print the sum of the first n numbers, given n (inclusive) 
    // if n is even, also print "even"
    const testcases = ["7","3","2","1","5","10000000","10000000000", "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296983247106012836081263480163000832128","923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296983247106012836081263480163000832128923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296983247106012836081263480163000832128923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296923716948763218497698317469873649872163987469187364987632198746982179643876219837469821736498712369847632198476321987463981726476219874698217364987129692371694876321849769831746987364987216398746918736498763219874698217964387621983746982173649871236984763219847632198746398172647621987469821736498712969237169487632184976983174698736498721639874691873649876321987469821796438762198374698217364987123698476321984763219874639817264762198746982173649871296983247106012836081263480163000832128"]
    const answers   = ["28","6","3\neven","1","15","50000005000000\neven","50000000005000000000\nevenneven", "426626500716215213642286075621208120065542140250605428701048222339585535927215754012841120951030637854747683127985316365054827827684161299498066970847703185275877885867976664937678578422319487194679284603439660005030314781379567947820683096499515031653688346532754271756427191779655287935625200217767616370790168415021458910126779503603263242017533350866400921518782667100916641432024008208090392699952190192475271001187634890077654215974130059373845046242305274904145612015375979114936429453531559877327245787703706230272369532606926594810653083389673901155029726657519962706097734290315469759872591333084753153296678907813973928027951253258286136641956785148325553419383464740107065078880049712750935258329081192621492116192318770315903352651380779816154527577910294325442641025814440886357121911729618084571788073621573969252695343749827903411716290312654265941257723223611402776720277515832677430049900057984049092076010388465882608664738841520979504049062874359190120959203137998099176780185215748709947562376325329723560357367640896469640021678211818466321030715471947651282918377324084197085078604628966856991101808452148100646182337077002925986838862969815852488712475957445760976518769677561341864692684365652173629426371924849378169451001805925885302742654628460480837588749255475647598733039880673118339407244445259587915475786339057535295486254753928651838494017754403300562866403256545116710304756218942903797446433649755301692759777722760685962802989896860006453738307924894772149158924466280506857569482956906768643372451662856068941578690376251561324735196948287137188683796856578787871656628412085411466044905253909083492590343110217053107367839704685715064242203093612154639845862864570972202750075518001415193090940183742443717980346724466054387183324608916513398737449570347130454165958668499365242313443780754184997914299408483157127290678034401856248313555746816149910520177808190628326926756582550261334250140656654988165994988662660660021476001605538113728806063461313483238002779748413579379616069648559218453828144679598381834658420724807444676806177684894143956501929727693190872545319301547897973184938219362713119702562768984676775935531904651446576286222604129830717898285025400875693923109858622194477422224750504285588751547902463645549563539255850355811908010805680173769137871051312584769592829665059982544519347595838658495967890710175203662662046543005385081559840818400855039536094433728119320688968754470964110407063980806450907197907404100170149770467605562340184881445184821202803942146310464534378829511269112276164691983270763391110231305634235631814084765279675104782579668313733784891737379354268075918992078589704077285333459036392635472441445712051438224047048929846258791735656684879002055909567331176811335188327903416300942352817291718920256\neven", "\neven"]

    let results     = [];

    

    let start = performance.now();
    switch(language){
      case 'py3':
        results = await runPythonTests(testcases,answers);
        break;
      case 'cpp20':
        results = await runCpp20Tests(testcases,answers);
        break;
    }
    let end = performance.now();
    console.log(Math.round(end-start)+'ms')


    res.json({output: results})


    //res.json({hi:2})
})

app.listen(5000, () => {console.log("server started on port 5000 :D")})
